/* eslint-disable */
import {
  defineSchema,
  initialize,
  Model,
  Field,
  BaseModel,
  DataType as DT,
  ExtractTypeFromField,
  Table,
} from '../src';

// TODO: name
type FieldMapNW<TableT extends Table> = {
  [K in keyof TableT['fields']]: ExtractTypeFromField<TableT['fields'][K]>;
};

// This is going to be in (e.g. db/schema.ts) autogenerated file
const schema = defineSchema({ version: 2020_04_21_132109 })
  .createTable('users', {
    id: DT.integer(),
    username: DT.string(),
    email: DT.string(),
  });

async function go() {
  await initialize({
    adapterName: 'postgres',
    database: 'vgoscam',
    host: 'localhost',
    schema,
  });

  type UserTable = typeof schema['tables']['users'];

  interface User extends FieldMapNW<UserTable> {}

  @Model()
  class User extends BaseModel<UserTable> {}

  @Model()
  class Test extends BaseModel {
    @Field()
    public id!: number;

    @Field()
    public test1!: string;

    @Field()
    public test2!: number;
  }

  const user = new User;

  console.log('changeset: ', user.changeset())

  user.username = 'asdf';
  user.email = '12361923681';

  console.log('changeset: ', user.changeset());

  const test = new Test;

  console.log('changeset: ', test.changeset())

  test.test1 = 'asdf';
  test.test2 = 1234;

  console.log('changeset: ', test.changeset());
}

go();
